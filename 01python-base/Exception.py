# 异常处理
# 捕捉异常可以使用try/except语句。
#
# try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。
#
# 如果你不想在异常发生时结束你的程序，只需在try里捕获它。
#
# 语法：
#
# 以下为简单的try....except...else的语法：
#
# try:
#     <语句>        #运行别的代码
# except <名字>：
# <语句>        #如果在try部份引发了'name'异常
# except <名字>，<数据>:
# <语句>        #如果引发了'name'异常，获得附加的数据
# else:
# <语句>        #如果没有异常发生

# try的工作原理是，当开始一个try语句后，python就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，try子句先执行，
# 接下来会发生什么依赖于执行时是否出现异常。
#
# 如果当try后的语句执行时发生异常，python就跳回到try并执行第一个匹配该异常的except子句，异常处理完毕，控制流就通过整个try语句
# （除非在处理异常时又引发新的异常）。
# 如果在try后的语句里发生了异常，却没有匹配的except子句，异常将被递交到上层的try，或者到程序的最上层（这样将结束程序，并打印缺省的出错信息）。
# 如果在try子句执行时没有发生异常，python将执行else语句后的语句（如果有else的话），然后控制流通过整个try语句

# 使用except而不带任何异常类型
# 你可以不带任何异常类型使用except，如下实例：
#
# try:
#     正常的操作
# ......................
# except:
# 发生异常，执行这块代码
# ......................
# else:
# 如果没有异常执行这块代码
# 以上方式try-except语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常

# 使用except而带多种异常类型
# 你也可以使用相同的except语句来处理多个异常信息，如下所示：
#
# try:
#     正常的操作
# ......................
# except(Exception1[, Exception2[,...ExceptionN]]]):
# 发生以上多个异常中的一个，执行这块代码
#     ......................
# else:
# 如果没有异常执行这块代码
# try-finally 语句
# try-finally 语句无论是否发生异常都将执行最后的代码。
#
# try:
#     <语句>
# finally:
# <语句>    #退出try时总会执行
# raise


# 异常的参数
# 一个异常可以带上参数，可作为输出的异常信息参数。
#
# 你可以通过except语句来捕获异常的参数，如下所示：
#
# try:
#     正常的操作
# ......................
# except ExceptionType, Argument:
# 你可以在这输出 Argument 的值...
# 变量接收的异常值通常包含在异常的语句中。在元组的表单中变量可以接收一个或者多个值。
#
# 元组通常包含错误字符串，错误数字，错误位置。


# 触发异常
# 我们可以使用raise语句自己触发异常
#
# raise语法格式如下：
#
# raise [Exception [, args [, traceback]]]
# 语句中 Exception 是异常的类型（例如，NameError）参数标准异常中任一种，args 是自已提供的异常参数。
#
# 最后一个参数是可选的（在实践中很少使用），如果存在，是跟踪异常对象。
